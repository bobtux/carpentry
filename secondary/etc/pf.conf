# managed by carpentry
# see the README.md for carpentry

# design:
# - provide internet with nat
# - block all by default


################################################################################
# 1. includes and interface macros
include "/etc/pf.if"


################################################################################
# 2. main macros and tables that are not for interfaces


####################
# gateway addresses and tables

v999_gw_carp=192.168.0.103
v100_gw_carp=192.168.100.103
v120_gw_carp=192.168.120.103
v120_gw_carp=192.168.130.103

v999_gw_main=192.168.0.101
v100_gw_main=192.168.100.101
v110_gw_main=192.168.110.101
v120_gw_main=192.168.120.101
v120_gw_main=192.168.130.101

v999_gw_secondary=192.168.0.102
v100_gw_secondary=192.168.100.102
v110_gw_secondary=192.168.110.102
v120_gw_secondary=192.168.120.102
v130_gw_secondary=192.168.130.102

v999_net="192.168.0.0/24"
v100_net="192.168.100.0/24"
v110_net="192.168.110.0/24"
v120_net="192.168.120.0/24"
v130_net="192.168.120.0/24"

vpn1_net="10.10.10.0/24"
vpn2_net="10.10.11.0/24"

table <nets_iana_non_external> const { 0.0.0.0/8 10.0.0.0/8 100.64.0.0/10 127.0.0.0/8 169.254.0.0/16 172.16.0.0/12 192.0.0.0/24 192.0.0.0/29 192.0.0.8/32 192.0.0.9/32 192.0.0.170/32 192.0.0.171/32 192.0.2.0/24 192.31.196.0/24 192.52.193.0/24 192.88.99.0/24 192.168.0.0/16 192.175.48.0/24 198.18.0.0/15 198.51.100.0/24 203.0.113.0/24 224.0.0.0/24 239.0.0.0/8 240.0.0.0/4 255.255.255.255/32 }
table <nets_internal> const { $v100_net $v110_net $v120_net $v130_net}
table <nets_vpn> const { $vpn1_net $vpn2_net }

# security
table <ssh-abusers> persist
table <blacklist> persist file "/etc/pf.tables/blacklist.txt" # updated periodically by crontab and with /root/bin/pf-restart.sh

# ntp
table <ntp_pool> persist file "/etc/pf.tables/ntp_pool.txt" # updated periodically by crontab and with /root/bin/pf-restart.sh

# packages
table <pkgs_openbsd> persist { } # updated periodically by crontab and with /root/bin/pf-restart.sh
table <pkgs_ubuntu> persist { }  # updated periodically by crontab and with /root/bin/pf-restart.sh


####################
# server and user addresses and tables

mail=192.168.100.121
host=192.168.100.201
revproxy1=192.168.100.120
ns01=192.168.100.111
ns02=1.2.3.4

lan0_mmadeira=192.168.100.10
vpn_mmadeira=10.10.10.10
wan1_mmadeira=192.168.0.214


################################################################################
# 3. options and CRUD


set skip on lo
# no blocking on the sync_if that is also used for carpentry
set skip on $if_sync
set skip on $if_management

# enable statistics collection. check with: pfctl -s info
set loginterface $if_wan1
set loginterface $if_sync

# conservative defaults
#set limit { states 20000, frags 2000, src-nodes 2000 }

# troubleshooting
# > ifconfig pflog1 create
#match log (matches to pflog1) inet proto {tcp udp} from 192.168.0.214 to any port 53
#match log (matches to pflog1) inet proto {tcp udp} from any port 53 to 192.168.0.214


################################################################################
# 4. traffic normalization


################################################################################
# 5. nat


####################
# wan1
match out on $if_wan1 nat-to $v999_gw_carp tagged t_lan0_inet
pass out quick on $if_wan1 tagged t_lan0_inet
match out on $if_wan1 nat-to $v999_gw_carp tagged t_lan2_inet
pass out quick on $if_wan1 tagged t_lan2_inet
match out on $if_wan1 nat-to $v999_gw_carp tagged t_lan3_inet
pass out quick on $if_wan1 tagged t_lan3_inet


####################
# wan2


################################################################################
# 6. filtering


####################
# default policy and significant blocks that override passes that come later in this file

# ipv4 default deny: in and out. This implies that, in situations where an exception must be created for single-directional TCP connections, two rules must be created, where one would usually be enough without this policy. Example:
#- pass in quick on { $if_lan3 } proto tcp from 192.168.130.1 to 192.168.120.2 port 80
#- pass out quick on { $if_lan2 } proto tcp from 192.168.130.1 to 192.168.120.2 port 80
#- lazily merged: pass quick on { $if_lan3 $if_lan2 } proto tcp from 192.168.130.1 to 192.168.120.2 port 80
block return log
# ipv6 disabled entirely
block return quick log inet6 

##########
# blacklists

block return quick log inet proto tcp from <blacklist> to any

# block ssh abuse hosts
block return quick log from <ssh-abusers>


####################
# special network-wide exceptions to policy
# - carp and pfsync
# - services
# - backup traffic
# - monitoring hosts traffic
# - mail: for gateways
# - ntp: for gateways
# - packages: for gateways

##########
# carp and pfsync
pass quick on $ifs_carp proto carp keep state (no-sync)
pass quick on $if_sync proto pfsync keep state (no-sync)

#########
# dns

# serve DNS on carp gateway to internal hosts
pass in quick on { $if_lan0 $if_lan2 } proto { tcp udp } from { <nets_internal> <nets_vpn> } to (self)  port 53

# allow carp gateways to reach DNS servers on the internet
pass out quick on $if_wan1 proto udp to any port 53 

# serve DNS to external networks
#pass in quick on { $if_wan1 } proto { tcp udp } from any to $v999_gw_carp port 53

#########
# icmp
icmp_type = "{ echoreq, unreach }"
pass in  inet proto icmp all icmp-type $icmp_type keep state
pass out inet proto icmp all icmp-type $icmp_type keep state

#########
# traceroute: udp
# allow out the default range for traceroute(8):
# "base+nhops*nqueries-1" (33434+64*3-1)
pass out on egress inet proto udp to port 33433:33626
#pass out on egress inet6 proto udp to port 33433:33626

#########
# mail: smtp
# allow internal hosts to reach smtp servers
s_mail_smtp="{ 25 2525 }"
pass quick on { $if_lan0 } inet proto tcp from { <nets_internal> <nets_vpn> } to $mail port $s_mail_smtp tag t_internal_mail
pass quick on $if_lan0 tagged s_internal_mail

# if the carp gateways need to get email out their systems when the only option is an external mail server
pass quick on $if_wan1 inet proto tcp from (self) to any port { 25 587 }

#########
# monitoring: restrict appropriately. Preferably, by interface AND port
monitor=192.168.100.105
pass quick on any proto tcp from $monitor to { <nets_internal> <nets_vpn> } port 65532
pass quick on any proto tcp from { <nets_internal> <nets_vpn> } to $monitor port 65500

#########
# ntp
pass out quick on $if_wan1 proto udp from (self) to <ntp_pool> port 123
pass out quick on $if_wan1 proto tcp from (self) to <ntp_constraints> port 443

ntp=192.168.100.105
pass quick on any proto udp from { <nets_internal> <nets_vpn> } to $ntp port ntp
pass quick on any proto udp from $ntp to { <nets_internal> <nets_vpn> } port ntp

#########
# ssh: critical rules only

lan0_mmadeira=192.168.120.10
table <ssh_management> const { $wan1_mmadeira $vpn_mmadeira $lan0_mmadeira $v100_gw_main $v100_gw_secondary $v120_gw_main $v120_gw_secondary }
pass quick on { $if_lan0 $if_lan2 $if_management $if_wan1 } inet proto tcp from <ssh_management> to { $v999_gw_carp <nets_internal> } port ssh

#########
# package repositories
pass quick on { $if_lan0 $if_lan2 } inet proto tcp  from any to <pkgs_openbsd>
pass quick on $if_wan1 inet proto tcp from $v999_gw_carp to <pkgs_openbsd> port { ssh http https }


####################
# wan1

# ssh: to carp gateways through external interface
s_ssh_inet=22
pass in quick on $if_wan1 inet proto tcp to $v999_gw_carp port 22 keep state  (max-src-conn-rate 2/5, overload <ssh-abusers> flush global)
#pass in quick on $if_wan1 inet proto tcp to $v999_gw_carp port 22 keep state  (max-src-conn-rate 2/5, overload <ssh-abusers> flush global) rdr-to $v100_gw_carp port ssh

##########
# vpn1: VPN service host at the carp gateways
s_vpn1=443
# vpn1: allow traffic: this will only work properly if only the carp interface has an address. If the phy interface still has an address, it will be used as the outgoing address and will not establish a TCP session
pass in quick on $if_wan1 inet proto udp to $v999_gw_carp port { $s_vpn1 } tag t_inet_vpn1
pass quick on $if_wan1 tagged t_inet_vpn1

##########
# vpn-client-aquarium: vpn client to remote vpn server
s_vpn_client_aquarium=443
#pass out quick on $if_wan1 inet proto udp from $v999_gw_carp port { $s_vpn_client_aquarium } tag t_inet_vpn1
pass out quick on $if_wan1 inet proto udp from (self) to 192.168.0.2 port { $s_vpn_client_aquarium } 


####################
# vlan100: lan0

##########
# mail server
# smtp + imap + pop services

s_mail="{ 2525 25 587 993 995 }"

pass in quick on $if_wan1 inet proto tcp to $v999_gw_carp port $s_mail rdr-to $mail tag t_inet_mail
pass quick on $if_lan0 modulate state tagged s_inet_mail
pass quick on $if_lan0 inet proto tcp from { <nets_internal> <nets_vpn> }  to $mail port $s_mail
pass quick on $if_lan0 inet proto { tcp udp } from { <nets_internal> <nets_vps> } to $mail port $s_mail tag t_internal_mail
pass quick on $if_lan0 tagged s_internal_mail

##########
# reverse proxy for multiple internal services

s_revproxy_inet=" { 80 443 }"
s_revproxy="{ 22 80 443 }"

pass in quick on $if_wan1 inet proto tcp to $v999_gw_carp port $s_revproxy_inet rdr-to $revproxy1 tag t_inet_revproxy
pass quick on $if_lan0 tagged t_inet_revproxy

pass quick on $if_lan0 inet proto { tcp udp } from { <nets_internal> <nets_vps> } to $revproxy1 port $s_revproxy_inet
pass quick on $if_lan0 inet proto tcp from $revproxy1 to <pkgs_openbsd> tag t_revproxy_inet

##########
# dns servers with replication on different locations
# ns01: internal DNS server
# ns02: external DNS server

s_ns01_inet=" { 53 }"
s_ns01="{ 22 53 }"
pass in quick on $if_wan1 inet proto { tcp udp } to $v999_gw_carp port $s_ns01_inet rdr-to $ns01 tag t_inet_ns01
pass quick on $if_lan0 tagged t_inet_ns01
pass quick on $if_lan0 inet proto { tcp udp } from { <nets_internal> <nets_vps> } to $ns01 port $s_ns01
pass quick on $if_lan0 inet proto tcp from $ns01 to <pkgs_openbsd> tag t_ns01_inet
pass quick on $if_lan0 inet proto { tcp udp } from $ns01 to $ns02 tag t_ns01_inet

##########
# host: generic host with only internet access
pass quick on { $if_lan0 $if_lan2 } proto tcp from { <nets_vpn> <nets_internal> } to $host
pass in quick on $if_lan0 from $host to ! <nets_iana_non_external> tag t_lan0_inet


####################
# vlan120: users

pass quick on $if_lan2 from (self) to $v120_net
pass in quick on $if_lan2 from <nets_internal> to ! <nets_iana_non_external> tag t_lan2_inet
pass quick on $if_lan2 proto tcp from  { <nets_internal> <nets_vpn> } to 192.168.120.2 port 80


####################
# vlan130: users

# allow gateway to reach hosts on this network
pass quick on $if_lan3 from (self) to $v130_net
pass in quick on $if_lan3 from <nets_internal> to ! <nets_iana_non_external> tag t_lan3_inet
pass quick on { $if_lan3 $if_lan2 } proto tcp from 192.168.130.1 to 192.168.120.2 port 80


####################
# other

